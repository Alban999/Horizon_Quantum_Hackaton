sub logical_x
    increment i to n_log
        logical_index1 == i -> apply
        if apply
            increment j to n_phys_per_log
                n_phys_per_log*logical_index1 + j-1 -> physical_index
                qubit_array.[physical_index] -> qubit_reg.[j]
                x[qubit_reg.[j]]
            next
        end
    next
endsub

sub logical_z
    increment i to n_log
        logical_index1 == i -> apply
        if apply
            increment j to n_phys_per_log
                n_phys_per_log*logical_index1 + j-1 -> physical_index
                qubit_array.[physical_index] -> qubit_reg.[j]
                z[qubit_reg.[j]]
            next
        end
    next
endsub

sub logical_h
    increment i to n_log
        logical_index1 == i -> apply
        if apply
            increment j to n_phys_per_log
                n_phys_per_log*logical_index1 + j-1 -> physical_index
                qubit_array.[physical_index] -> qubit_reg.[j]
                h[qubit_reg.[j]]
            next
        end
    next
endsub

sub logical_y
    increment i to n_log
        logical_index1 == i -> apply
        if apply
            increment j to n_phys_per_log
                n_phys_per_log*logical_index1 + j-1 -> physical_index
                qubit_array.[physical_index] -> qubit_reg.[j]
                y[qubit_reg.[j]]
            next
        end
    next
endsub

sub logical_cx
    increment i to n_log
        increment j to n_log
            logical_index1 == i -> apply1
            if apply1
                logical_index2 == j -> apply2
                if apply2
                    increment k to n_phys_per_log
                        n_phys_per_log*logical_index1 + k-1 -> physical_index1
                        n_phys_per_log*logical_index2 + k-1 -> physical_index2
                        qubit_array.[physical_index1] -> qubit_ctrl
                        qubit_array.[physical_index2] -> qubit_tgt
                        cnot[qubit_ctrl, qubit_tgt]
                    next
                end
            end
        next
    next
endsub

sub measure_syndromes
    # Extract syndrome for all qubits, should all be 0 to stop the msd protocol
    0 -> c
    increment i to n_log_msd
        increment j to n_ancilla_per_log_msd
            measure ancilla_array.[n_ancilla_per_log_msd*i + j-1] -> count
            c + count -> c
            measure qubit_reg.[j] -> measure_reg.[j]
        next
    end
    next

endsub