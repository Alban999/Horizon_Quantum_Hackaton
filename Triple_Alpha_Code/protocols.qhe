# Takes global variable q_t as input, should be defined before calling the routine
sub five_q_protocol
    #assigning the logical qubit to the physical
    q_t+0*numb_qubits -> q_i1
    q_t+1*numb_qubits -> q_i2
    q_t+2*numb_qubits -> q_i3
    q_t+3*numb_qubits -> q_i4
    q_t+4*numb_qubits -> q_i5
    # Hadamards on ancillas
    increment j to 4
        j-1 -> i
        qubit -> anc.[i]
        h[anc.[i]]
    next
    # controlled operations on ancillas and state (state is encoded in 5i, ... 5i+4),
    cnot[anc.[0], in.[q_i1]]
    cz[anc.[0], in.[q_i2]]
    cz[anc.[0], in.[q_i3]]
    cnot[anc.[1], in.[q_i2]]
    cnot[anc.[2], in.[q_i1]]
    cnot[anc.[0], in.[q_i4]]
    cz[anc.[1], in.[q_i3]]
    cz[anc.[3], in.[q_i1]]
    cz[anc.[1], in.[q_i4]]
    cnot[anc.[2], in.[q_i3]]
    cnot[anc.[3], in.[q_i1]]
    cnot[anc.[1], in.[q_i5]]
    cz[anc.[2], in.[q_i4]]
    cz[anc.[2], in.[q_i5]]
    cnot[anc.[3], in.[q_i4]]
    cz[anc.[3], in.[q_i5]]
    # Hadamards on ancillas
    increment j to 4
        j - 1 -> i
        h[anc.[i]]
    next
    # Performing syndrome measurements and storing their values
    increment j to 4
        j - 1 -> i
        measure[anc.[i]] -> measurements.[i]
    next
    # Correction of errors
    if measurements.[0]
        if measurements.[1]
            if measurements.[2]
                if measurements.[3]
                    y[in.[q_i4]]
                end
                if ~measurements.[3]
                    y[in.[q_i3]]
                end
            end
            if ~measurements.[2]
                if measurements.[3]
                    y[in.[q_i2]]
                end
                if ~measurements.[3]
                    x[in.[q_i3]]
                end
            end
        end
        if ~measurements.[1]
            if measurements.[2]
                if measurements.[3]
                    y[in.[q_i1]]
                end
                if ~measurements.[3]
                    z[in.[q_i1]]
                end
            end
            if ~measurements.[2]
                if measurements.[3]
                    z[in.[q_i4]]
                end
                if ~measurements.[3]
                    x[in.[q_i2]]
                end
            end
        end
    end
    
    if ~measurements.[0]
        if measurements.[1]
            if measurements.[2]
                if measurements.[3]
                    y[in.[q_i5]]
                end
                if ~measurements.[3]
                    x[in.[q_i4]]
                end
            end
            if ~measurements.[2]
                if measurements.[3]
                    z[in.[q_i2]]
                end
                if ~measurements.[3]
                    z[in.[q_i5]]
                end
            end
        end
        if ~measurements.[1]
            if measurements.[2]
                if measurements.[3]
                    x[in.[q_i5]]
                end
                if ~measurements.[3]
                    z[in.[q_i3]]
                end
            end
            if ~measurements.[2]
                if measurements.[3]
                    x[in.[q_i1]]
                end
            end
        end
    end
endsub

sub bitFLipless_gate
    # Now you want to apply one single gate chosen among S, H, T and CX on one (two) qubit(s)
    # And let it being affected by some random noise (for bitflip it will be a flip gate only)
    # Variables op , q_i and q_j should come from outside
    q_t+0*numb_qubits -> q_i1
    q_t+1*numb_qubits -> q_i2
    q_t+2*numb_qubits -> q_i3
    # Check parity for any of the numb_qubits qubits by using 2 ancillary qubits at a time
    qubit -> anc.[0]
    qubit -> anc.[1]
    cnot[out.[q_i1], anc.[0]]
    cnot[out.[q_i1], anc.[1]]
    cnot[out.[q_i2], anc.[0]]
    cnot[out.[q_i3], anc.[1]]
    measure[anc.[0]] -> anc0
    measure[anc.[1]] -> anc1
    if anc0
        if ~anc1
            x[out.[q_i3]]           
        end
    end
    if ~anc0
        if anc1
            x[out.[q_i2]]        
        end
        if ~anc1
            x[out.[q_i1]]
        end
    end
endsub


sub phaseFLipless_gate
    # Now you want to apply one single gate chosen among S, H, T and CX on one (two) qubit(s)
    # And let it being affected by some random noise (for bitflip it will be a flip gate only)
    # Variables op , q_i and q_j should come from outside
    q_t+0*numb_qubits -> q_i1
    q_t+1*numb_qubits -> q_i2
    q_t+2*numb_qubits -> q_i3
    
    # Hadamard gates
    h[in.[q_i1]]
    h[in.[q_i2]]
    h[in.[q_i3]]
    # Check parity for any of the numb_qubits qubits by using 2 ancillary qubits at a time
    qubit -> anc.[0]
    qubit -> anc.[1]
    cnot[out.[q_i1], anc.[0]]
    cnot[out.[q_i1], anc.[1]]
    cnot[out.[q_i2], anc.[0]]
    cnot[out.[q_i3], anc.[1]]
    measure[anc.[0]] -> anc0
    measure[anc.[1]] -> anc1
    if anc0
        if ~anc1
            x[out.[q_i3]]           
        end
    end
    if ~anc0
        if anc1
            x[out.[q_i2]]        
        end
        if ~anc1
            x[out.[q_i1]]
        end
    end
endsub

# q_i and q_j need to be defined before subroutine below is used
# subroutine that applies logical gates for the physical qubits
sub apply_gates
    if is_no_protocol 
        numb_log_2_phys -> 1
    end
    if is_protocol_bitflip 
        numb_log_2_phys -> 3
    end
    if is_protocol_phaseflip 
        numb_log_2_phys -> 3
    end
    if is_protocol_five_qubit 
        numb_log_2_phys -> 5
    end
    
    # Apply gate OP
    increment i to numb_log_2_phys
        q_i+(i-1)*numb_qubits -> q_i_temp
        maybe_randomrotation(protocol, theta_x, theta_y, theta_z)[in.[q_i_temp]]
        if is_s
            s[in.[q_i_temp]]
        end
        if is_h
            h[in.[q_i_temp]]
        end
        if is_t
            t[in.[q_i_temp]]
        end
        if is_cnot
            q_j+(i-1)*numb_qubits -> q_j_temp
            cnot[in.[q_i_temp], in.[q_j_temp]]
        end
    next
    
    # Apply noise
    increment i to numb_log_2_phys
        q_i+(i-1)*numb_qubits -> q_i_temp
        maybe_randomrotation(protocol, theta_x, theta_y, theta_z)[in.[q_i_temp]]
        if is_cnot
            q_j+(i-1)*numb_qubits -> q_j_temp
            maybe_randomrotation(protocol, theta_x, theta_y, theta_z)[in.[q_j_temp]]
        end
    next
endsub