# This is your source file. Youâ€™ll need a main.qhe file for us to compile your code.
include constants.qh
include protocols.qhe
# Define the initial psi state
increment i to num_qubits
    qubit -> in.[i]
next

protocol == 0 -> is_no_protocol
protocol == 1 -> is_protocol_bitflip
protocol == 2 -> is_protocol_phaseflip
protocol == 3 -> is_protocol_five_qubit

if is_no_protocol
    increment j to num_operations
        j -1 -> i
        ops.[i] -> op
        q_is.[i] -> q_i
        op == 1 -> is_s
        op == 2 -> is_h
        op == 3 -> is_t
        op == 4 -> is_cnot
        if is_s
            s[in.[q_i]]
        end
        if is_h
            h[in.[q_i]]
        end
        if is_t
            t[in.[q_i]]
        end
        if is_cnot
            q_js.[i] -> q_j
            cnot[in.[q_i], in.[q_j]]
            # Noise
            maybe_flip(protocol, theta_x, theta_y, theta_z)[in.[q_j]]
        end
        # Noise
        maybe_flip(protocol, theta_x, theta_y, theta_z)[in.[q_i]]
    next
end

if is_protocol_bitflip
    # Implementantion of bitflip EC code
    # Need 3n + 2 physical qubits for n logical ones
    # Convention: Last 2 are ancillas other 3n encode the logical qubits (0...n-1 are the original ones)
    increment i to num_qubits
        i-1 -> i0
        i+num_qubits-1 -> i1
        i+2*num_qubits-1 -> i2
        cnot[in.[i0], in.[i1]]
        cnot[in.[i0], in.[i2]]
    next
    # Apply the operations by embedding the flip corrector after each gate
    increment j to num_operations
        j -1 -> i
        ops.[i] -> op
        q_is.[i] -> q_i
        op == 1 -> is_s
        op == 2 -> is_h
        op == 3 -> is_t
        op == 4 -> is_cnot
        if is_cnot
            q_js.[i] -> q_j
        end
        gosub bitFLipless_gate
    next
end

if is_protocol_phaseflip
    # Implementantion of phaseflip EC code
    # Need 3n + 2 physical qubits for n logical ones
    # Convention: Last 2 are ancillas other 3n encode the logical qubits (0...n-1 are the original ones)
    increment i to num_qubits
        i-1 -> i0
        i+num_qubits-1 -> i1
        i+2*num_qubits-1 -> i2
        cnot[in.[i0], in.[i1]]
        cnot[in.[i0], in.[i2]]
        h[in.[i0]]
        h[in.[i1]]
        h[in.[i2]]
    next
    # Apply the operations by embedding the flip corrector after each gate
    increment j to num_operations
        j -1 -> i
        ops.[i] -> op
        q_is.[i] -> q_i
        op == 1 -> is_s
        op == 2 -> is_h
        op == 3 -> is_t
        op == 4 -> is_cnot
        if is_cnot
            q_js.[i] -> q_j
        end
        gosub phaseFLipless_gate
    next
end

if is_protocol_five_qubit
    # Implementantion of 5-qubit EC code
    # Need 5n + 4 physical qubits for n logical ones
    # Convention: Last 4 are ancillas other 5n encode the logical qubits (0...n-1 are the original ones)
    increment i to num_qubits
        i-1 -> i0
        i+num_qubits-1 -> i1
        i+2*num_qubits-1 -> i2
        i+3*num_qubits-1 -> i3
        i+4*num_qubits-1 -> i4
        cnot[in.[i0], in.[i1]]
        cnot[in.[i0], in.[i2]]
        cnot[in.[i0], in.[i3]]
        cnot[in.[i0], in.[i4]]
    next
    # Apply the operations by embedding the 5-qubit corrector after each gate
    increment j to num_operations
        j -1 -> i
        ops.[i] -> op
        q_is.[i] -> q_i
        op == 1 -> is_s
        op == 2 -> is_h
        op == 3 -> is_t
        op == 4 -> is_cnot
        if is_cnot
            q_js.[i] -> q_j
        end
        gosub five_q_gate
    next
end
